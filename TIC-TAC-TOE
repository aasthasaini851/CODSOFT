import math

# Function to display the Tic-Tac-Toe board
def display_board(board):
    for row in board:
        print(" | ".join(row))

# Function to check if a player has won
def has_won(board, player):
    win_states = [ [board[0][0], board[0][1], board[0][2]],
        [board[1][0], board[1][1], board[1][2]],
        [board[2][0], board[2][1], board[2][2]],
        [board[0][0], board[1][0], board[2][0]],
        [board[0][1], board[1][1], board[2][1]],
        [board[0][2], board[1][2], board[2][2]],
        [board[0][0], board[1][1], board[2][2]],
        [board[0][2], board[1][1], board[2][0]] ]
    return [player, player, player] in win_states

# Function to check if the game is a draw
def is_draw(board):
    return all(cell != ' ' for row in board for cell in row)

# Minimax algorithm with Alpha-Beta pruning for AI decision making
def minimax(board, depth, is_maximizing, alpha, beta):
    if has_won(board, 'O'):
        return 1
    if has_won(board, 'X'):
        return -1
    if is_draw(board):
        return 0

    if is_maximizing:
        max_eval = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    evaluation = minimax(board, depth + 1, False, alpha, beta)
                    board[i][j] = ' '
                    max_eval = max(max_eval, evaluation)
                    alpha = max(alpha, evaluation)
                    if beta <= alpha:
                        break
        return max_eval
    else:
        min_eval = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    evaluation = minimax(board, depth + 1, True, alpha, beta)
                    board[i][j] = ' '
                    min_eval = min(min_eval, evaluation)
                    beta = min(beta, evaluation)
                    if beta <= alpha:
                        break
        return min_eval

# Function to determine the best move for AI
def best_move(board):
    optimal_move = None
    highest_value = -math.inf
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'O'
                move_value = minimax(board, 0, False, -math.inf, math.inf)
                board[i][j] = ' '
                if move_value > highest_value:
                    highest_value = move_value
                    optimal_move = (i, j)
    return optimal_move

# Function to run the Tic-Tac-Toe game
def run_game():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    current_turn = 'X'  # Human player starts

    while True:
        display_board(board)
        if current_turn == 'X':
            row = int(input("Enter row (0-2): "))
            col = int(input("Enter column (0-2): "))
            if board[row][col] == ' ':
                board[row][col] = 'X'
                if has_won(board, 'X'):
                    display_board(board)
                    print("Congratulations, you win!")
                    break
                current_turn = 'O'
        else:
            print("Its AI turn...")
            move = best_move(board)
            board[move[0]][move[1]] = 'O'
            if has_won(board, 'O'):
                display_board(board)
                print("AI wins!")
                break
            current_turn = 'X'

        if is_draw(board):
            display_board(board)
            print("It's a draw!")
            break

# Initiate the game
run_game()
